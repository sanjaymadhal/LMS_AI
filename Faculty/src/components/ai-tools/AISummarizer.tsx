
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { FileText, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const AISummarizer: React.FC = () => {
  const [text, setText] = useState('');
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  
  const handleSummarize = () => {
    if (!text.trim()) {
      toast({
        title: "No content to summarize",
        description: "Please enter or upload some content first.",
        variant: "destructive"
      });
      return;
    }
    
    setIsLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      const generatedSummary = `This is a simulated AI summary of the text you provided. In a real implementation, this would be generated by an AI model based on the content you entered. The summary would extract key points and main ideas from your text.`;
      setSummary(generatedSummary);
      setIsLoading(false);
      
      toast({
        title: "Summary generated",
        description: "Your content has been successfully summarized.",
      });
    }, 1500);
  };
  
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // In a real implementation, we would parse the file content
      setIsLoading(true);
      setTimeout(() => {
        setText(`Content from "${file.name}" would be extracted here in a real implementation.`);
        setIsLoading(false);
      }, 1000);
    }
  };

  return (
    <div className="grid md:grid-cols-2 gap-6">
      <Card className="animate-fade-in">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Input Content
          </CardTitle>
          <CardDescription>
            Enter text or upload a document to summarize
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Textarea 
              placeholder="Enter text to summarize..."
              className="min-h-[200px]"
              value={text}
              onChange={(e) => setText(e.target.value)}
            />
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" className="hover-scale">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <FileText className="h-4 w-4" />
                    <span>Upload File</span>
                    <input 
                      type="file" 
                      accept=".txt,.pdf,.docx"
                      className="hidden"
                      onChange={handleFileUpload}
                    />
                  </label>
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
        <CardFooter>
          <Button 
            onClick={handleSummarize} 
            disabled={isLoading || !text.trim()}
            className="hover-scale"
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Summarizing...
              </>
            ) : (
              'Generate Summary'
            )}
          </Button>
        </CardFooter>
      </Card>
      
      <Card className="animate-fade-in">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-edu-accent" />
            AI Summary
          </CardTitle>
          <CardDescription>
            A concise summary of your content
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex flex-col items-center justify-center h-[200px] gap-2">
              <Loader2 className="h-8 w-8 animate-spin text-edu-accent" />
              <p className="text-sm text-muted-foreground">Generating your summary...</p>
            </div>
          ) : summary ? (
            <div className="bg-muted p-4 rounded-md min-h-[200px]">
              {summary}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center h-[200px] gap-2 text-muted-foreground">
              <FileText className="h-12 w-12 opacity-20" />
              <p>Your summary will appear here</p>
            </div>
          )}
        </CardContent>
        <CardFooter className="justify-end gap-2">
          {summary && (
            <>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => {
                  navigator.clipboard.writeText(summary);
                  toast({
                    title: "Copied to clipboard",
                  });
                }}
                className="hover-scale"
              >
                Copy
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => {
                  const blob = new Blob([summary], { type: 'text/plain' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'summary.txt';
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  URL.revokeObjectURL(url);
                }}
                className="hover-scale"
              >
                Download
              </Button>
            </>
          )}
        </CardFooter>
      </Card>
    </div>
  );
};

export default AISummarizer;

import { Sparkles } from 'lucide-react';
